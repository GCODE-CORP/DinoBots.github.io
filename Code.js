// ============== ‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ==============
// ‚ùóÔ∏è**‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡πà‡∏≤ 2 ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
const SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1eR6ClXniPFfNRYOkbQTsslgd3bIOUF326uY5dqLOqd8/edit  "; //  << üîó ‡∏ß‡∏≤‡∏á URL ‡∏Ç‡∏≠‡∏á Google Sheet ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
const SHEET_NAME = "Keywords"; // << üìù ‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î

// ‚ùóÔ∏è**‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:** ‡πÉ‡∏™‡πà Channel Access Token ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
const CHANNEL_ACCESS_TOKEN = "5DxoEG4RKgfSFRvdQ424rQuDhDTcz13Yb3khnbABLZQnVtNawr7oP1Yehs1EOM/cCpuWL5Jsby3aaN/eYnsTvp4VHW4PXKw8A8lV1JHWqH3BqDeYB8Ued5OG/KkWoHzyHbAe84eZsdxk6lmaLzc0nAdB04t89/1O/w1cDnyilFU="; // << üîë ‡∏ß‡∏≤‡∏á Channel Access Token ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà

// ============== üñ•Ô∏è ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö (Web App) ==============
function doGet(e) {
  return HtmlService.createHtmlOutputFromFile('index')
    .setTitle("DinoBot Admin Panel")
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}

// ============== ü§ñ ‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Webhook ‡πÅ‡∏•‡∏∞ Logic ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó ==============
function doPost(e) {
  // --- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ Admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ---
  if (e.parameter) {
    // 1. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Action ‡∏Å‡∏≤‡∏£ "‡∏•‡∏ö"
    if (e.parameter.action === 'delete') {
      return deleteRowByKeyword(e.parameter.keyword);
    }
    
    // 2. ‚ú® **‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Action ‡∏Å‡∏≤‡∏£ "‡πÄ‡∏û‡∏¥‡πà‡∏°"** ‚ú®
    // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå 'keyword' ‡∏™‡πà‡∏á‡∏°‡∏≤ (‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà action 'delete')
    // ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    if (e.parameter.keyword) {
      return addNewKeyword(e.parameter);
    }
  }

  // --- 3. ‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Webhook ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å LINE (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Action ‡∏à‡∏≤‡∏Å Admin) ---
  try {
    const events = JSON.parse(e.postData.contents).events;
    events.forEach(handleMessageEvent);
  } catch (error) {
    Logger.log("Error parsing webhook: " + error);
  }

  return createJsonResponse({ 'status': 'success', 'source': 'webhook' });
}

// ============== üóÇÔ∏è ‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Google Sheet ==============

/**
 * ‚ú® **‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡∏•‡∏á Sheet** ‚ú®
 */
function addNewKeyword(params) {
  try {
    const sheet = SpreadsheetApp.openByUrl(SPREADSHEET_URL).getSheetByName(SHEET_NAME);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô Sheet
    const newRow = [
      params.timestamp || new Date(), // A: Timestamp
      params.keyword,                 // B: Keyword
      params.type,                    // C: Type
      params.content,                 // D: Content
      params.altText || '',           // E: AltText
      params.active === 'true',       // F: Active
      Number(params.usageCount) || 0  // G: UsageCount
    ];
    
    sheet.appendRow(newRow);
    
    return createJsonResponse({ 'status': 'success', 'message': 'Keyword added successfully.' });
  } catch (error) {
    Logger.log("Error in addNewKeyword: " + error);
    return createJsonResponse({ 'status': 'error', 'message': error.message });
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î (‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ Admin)
 */
function deleteRowByKeyword(keywordToDelete) {
  try {
    const sheet = SpreadsheetApp.openByUrl(SPREADSHEET_URL).getSheetByName(SHEET_NAME);
    const data = sheet.getDataRange().getValues();
    for (let i = data.length - 1; i >= 1; i--) {
      if ((data[i][1] || '').toString() === keywordToDelete) {
        sheet.deleteRow(i + 1);
        return createJsonResponse({ 'status': 'success', 'message': `Keyword '${keywordToDelete}' deleted.` });
      }
    }
    return createJsonResponse({ 'status': 'not_found', 'message': 'Keyword not found.' });
  } catch (e) {
    Logger.log("Error in deleteRowByKeyword: " + e);
    return createJsonResponse({ 'status': 'error', 'message': e.message });
  }
}

// ============== üí¨ ‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö LINE ==============
// (‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)

function handleMessageEvent(event) {
    if (event.type !== "message" || event.message.type !== "text") return;
    
    const replyToken = event.replyToken;
    const userMessage = event.message.text.toLowerCase().trim();
    
    const sheet = SpreadsheetApp.openByUrl(SPREADSHEET_URL).getSheetByName(SHEET_NAME);
    const data = sheet.getDataRange().getValues();

    for (let i = 1; i < data.length; i++) {
        const row = data[i];
        const keyword = (row[1] || '').toString().toLowerCase().trim();
        const isActive = row[5];
        if (keyword && userMessage.includes(keyword) && isActive) {
            const messageType = (row[2] || 'text').toString().trim();
            const content = (row[3] || '').toString().trim();
            const altText = (row[4] || '‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏∏‡∏ì').toString().trim();
            const replyMessage = createReplyMessage(messageType, content, altText);
            if (replyMessage) {
                sendReply(replyToken, [replyMessage]);
                break;
            }
        }
    }
}

function createReplyMessage(type, content, altText) {
    try {
        if (type === 'flex') return { "type": "flex", "altText": altText, "contents": JSON.parse(content) };
        if (type === 'image') return { "type": "image", "originalContentUrl": content, "previewImageUrl": content };
        return { "type": "text", "text": content };
    } catch (error) {
        Logger.log(`Error creating reply message (type: ${type}): ${error}`);
        return { "type": "text", "text": "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢, ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö" };
    }
}

function sendReply(replyToken, messages) {
    const url = 'https://api.line.me/v2/bot/message/reply';
    const options = {
        'method': 'post',
        'contentType': 'application/json',
        'payload': JSON.stringify({ 'replyToken': replyToken, 'messages': messages }),
        'headers': { 'Authorization': 'Bearer ' + CHANNEL_ACCESS_TOKEN }
    };
    try { UrlFetchApp.fetch(url, options); } catch (e) { Logger.log("Error sending reply: " + e); }
}

// ============== üõ†Ô∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏° ==============
function createJsonResponse(obj) {
  return ContentService.createTextOutput(JSON.stringify(obj))
    .setMimeType(ContentService.MimeType.JSON);
}
